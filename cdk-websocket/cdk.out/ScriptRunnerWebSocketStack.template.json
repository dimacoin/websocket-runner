{
 "Resources": {
  "ScriptRunnerWebSocketApi": {
   "Type": "AWS::ApiGatewayV2::Api",
   "Properties": {
    "Name": "ScriptRunnerWebSocketApi",
    "ProtocolType": "WEBSOCKET",
    "RouteSelectionExpression": "$request.body.action"
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ScriptRunnerWebSocketApi"
   }
  },
  "ConnectionHandlerServiceRole7E6275CB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectionHandler/ServiceRole/Resource"
   }
  },
  "ConnectionHandlerA342B66A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        exports.handler = async (event) => {\n          const connectionId = event.requestContext.connectionId;\n          console.log('Client connected:', connectionId);\n          \n          return { statusCode: 200, body: 'Connected' };\n        };\n      "
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "ConnectionHandlerServiceRole7E6275CB",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "ConnectionHandlerServiceRole7E6275CB"
   ],
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectionHandler/Resource"
   }
  },
  "ConnectionHandlerLogRetention3E01455C": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ConnectionHandlerA342B66A"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectionHandler/LogRetention/Resource"
   }
  },
  "ConnectionHandlerInvokeByWebSocketDA46B848": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ConnectionHandlerA342B66A",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:eu-central-1:033463826692:",
       {
        "Ref": "ScriptRunnerWebSocketApi"
       },
       "/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectionHandler/InvokeByWebSocket"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:PutRetentionPolicy",
        "logs:DeleteRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs20.x",
    "Timeout": 900,
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-033463826692-eu-central-1",
     "S3Key": "2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ConnectIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::Join": [
      "",
      [
       "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "ConnectionHandlerA342B66A",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectIntegration"
   }
  },
  "ConnectRoute": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "AuthorizationType": "NONE",
    "RouteKey": "$connect",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "ConnectIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/ConnectRoute"
   }
  },
  "DisconnectIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::Join": [
      "",
      [
       "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "ConnectionHandlerA342B66A",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/DisconnectIntegration"
   }
  },
  "DisconnectRoute": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "AuthorizationType": "NONE",
    "RouteKey": "$disconnect",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "DisconnectIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/DisconnectRoute"
   }
  },
  "DefaultIntegration": {
   "Type": "AWS::ApiGatewayV2::Integration",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "IntegrationType": "AWS_PROXY",
    "IntegrationUri": {
     "Fn::Join": [
      "",
      [
       "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/",
       {
        "Fn::GetAtt": [
         "ConnectionHandlerA342B66A",
         "Arn"
        ]
       },
       "/invocations"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/DefaultIntegration"
   }
  },
  "DefaultRoute": {
   "Type": "AWS::ApiGatewayV2::Route",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "AuthorizationType": "NONE",
    "RouteKey": "$default",
    "Target": {
     "Fn::Join": [
      "",
      [
       "integrations/",
       {
        "Ref": "DefaultIntegration"
       }
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/DefaultRoute"
   }
  },
  "Deployment": {
   "Type": "AWS::ApiGatewayV2::Deployment",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    }
   },
   "DependsOn": [
    "ConnectRoute",
    "DefaultRoute",
    "DisconnectRoute"
   ],
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/Deployment"
   }
  },
  "Stage": {
   "Type": "AWS::ApiGatewayV2::Stage",
   "Properties": {
    "ApiId": {
     "Ref": "ScriptRunnerWebSocketApi"
    },
    "AutoDeploy": true,
    "DeploymentId": {
     "Ref": "Deployment"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/Stage"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02OwWrDQAxEvyX3tZo4PfSapBQKhQbnA4KyVhbF611jaWOM8b+XtQn0NG/QaJgSdh8lbDc4SGHrpvB8g+miaBuDg1wn7Nih0oDjs4TpdA+Hjs3pHr6DkutROYZsq5iUMnxS5+PYUtDsLoqOZuOxvdUI01cK9vXxn8/UtyzCMcyGsYWpip7WWk/mHD3bccktNBsfncBPdBUphaVE9lcUIRU4ZDGyh2OyDekRhWZTkcTU27XzxUsyL+Tg8uE3aZd0NiHWBA95e5Yl7N5hu3kIc9GnoNwSVKv+AZ9G6mc4AQAA"
   },
   "Metadata": {
    "aws:cdk:path": "ScriptRunnerWebSocketStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "WebSocketURL": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "wss://",
      {
       "Ref": "ScriptRunnerWebSocketApi"
      },
      ".execute-api.eu-central-1.amazonaws.com/prod"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}